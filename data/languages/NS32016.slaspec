#
# National Semiconductor NS32016 
#

define endian=little;
define alignment=1;

define space ram type=ram_space size=4 default;
define space register type=register_space size=4;

define register offset=0x00 size=4 [ R0 R1 R2 R3 R4 R5 R6 R7 ];
define register offset=0x00 size=2 [ R0w _ R1w _ R2w _ R3w _ R4w _ R5w _ R6w _ R7w _];
define register offset=0x00 size=1 [ R0b _ _ _ R1b _ _ _ R2b _ _ _ R3b _ _ _
									 R4b _ _ _ R5b _ _ _ R6b _ _ _ R7b _ _ _ ];
define register offset=0x20 size=4 [ PC SB FP SP1 SP0 INTBASE ];
define register offset=0x40 size=2 [ PSR MOD ];
define register offset=0x48 size=1 [ CFG ];
define register offset=0x60 size=4 [ contextreg ];

define context contextreg
  isize=(0,1)
;

define bitrange C=PSR[0,1]
				T=PSR[1,1]
				L=PSR[2,1]
				F=PSR[5,1]
				Z=PSR[6,1]
				N=PSR[7,1]
				U=PSR[8,1]
				S=PSR[9,1]
				P=PSR[10,1]
				I=PSR[11,1];

#
# 8 bit instructions - format 0 and 1
#
define token insn8(8)
	i8_all=(0,7)
	b0_3=(0,3)
	cond=(4,7)
	op=(4,7)
;

#
# 16 bit instructions (and most significant 16 bits of 24 bit instructions)
#
define token insn16(16)
	i16_all=(0,15)
	i16_i=(0,1)

	fmt2_2_3=(2,3)
	fmt2_op=(4,6)
	fmt2_short=(7,10)
	fmt2_cc=(7,10)
	fmt2_quick=(7,10) signed

	i16_gen1=(11,15)
	i16_gen1_r=(11,13)
	i16_gen1_a=(11,13)
	i16_gen1_op=(14,15)

	i16_gen2=(6,10)
	i16_gen2_r=(6,8)
	i16_gen2_a=(6,8)
	i16_gen2_op=(9,10)

	fmt3_2_6=(2,6)
	fmt3_op=(7,10)

	fmt4_op=(2,5)

	fmt5_op=(2,5)
	fmt5_6=(6,6)
	fmt5_opts=(7,10)
	fmt5_cfg=(7,10)
;

#
# Immediate constants, big endian
#
define token imm_8(8)
	imm8=(0,7)
	simm8=(0,7) signed
;

define token imm_16(16) endian=big
	imm16=(0,15)
	simm16=(0,15) signed
;

define token imm_32(32) endian=big
	imm32=(0,31)
	simm32=(0,31) signed
;

#
# Variable length displacements, big endian
#
define token disp8(8) endian=big
	d8_mask=(7,7)
	val8=(0,6) signed
;

define token disp16(16) endian=big
	d16_mask=(14,15)
	val16=(0,13) signed
;

define token disp32(32) endian=big
	d32_mask=(30,31)
	val32=(0,29) signed
;

define token index(8)
	idx_reg=(0,2)
	idx_gen=(3,7)
;

#
# register mapping fields
#
attach variables [ i16_gen1_r i16_gen2_r idx_reg ] [ R0 R1 R3 R3 R4 R5 R6 R7 ];
attach variables [ i16_gen1_a i16_gen2_a ] [ FP SP1 SB _ _ _ _ _ ];

#
# Displacement table
#
disp:  val8 is  d8_mask=0b0  &  val8 { tmp:4 = val8; export tmp; }
disp: val16 is d16_mask=0b10 & val16 { tmp:4 = val16; export tmp; }
disp: val32 is d32_mask=0b11 & val32 { tmp:4 = val32; export tmp; }

#
# Condition codes table
#
cc: "EQ" is cond=0b0000 { tmp:1 =  Z; export tmp; }
cc: "NE" is cond=0b0001 { tmp:1 = !Z; export tmp; }
cc: "CS" is cond=0b0010 { tmp:1 =  C; export tmp; }
cc: "CC" is cond=0b0011 { tmp:1 = !C; export tmp; }
cc: "H"  is cond=0b0100 { tmp:1 =  L; export tmp; }
cc: "LS" is cond=0b0101 { tmp:1 = !L; export tmp; }
cc: "GT" is cond=0b0110 { tmp:1  = N; export tmp; }
cc: "LE" is cond=0b0111 { tmp:1 = !N; export tmp; }
cc: "FS" is cond=0b1000 { tmp:1 =  F; export tmp; }
cc: "FC" is cond=0b1001 { tmp:1 = !F; export tmp; }
cc: "LO" is cond=0b1010 { tmp:1 = !L && !Z; export tmp; }
cc: "HS" is cond=0b1011 { tmp:1 =  L ||  Z; export tmp; }
cc: "LT" is cond=0b1100 { tmp:1 = !N && !Z; export tmp; }
cc: "GE" is cond=0b1101 { tmp:1 =  N ||  Z; export tmp; }
cc: "T"  is cond=0b1110 { export 1:1; }
cc: "F"  is cond=0b1111 { export 0:1; }

cc2: "EQ" is fmt2_cc=0b0000 { tmp:1 =  Z; export tmp; }
cc2: "NE" is fmt2_cc=0b0001 { tmp:1 = !Z; export tmp; }
cc2: "CS" is fmt2_cc=0b0010 { tmp:1 =  C; export tmp; }
cc2: "CC" is fmt2_cc=0b0011 { tmp:1 = !C; export tmp; }
cc2: "H"  is fmt2_cc=0b0100 { tmp:1 =  L; export tmp; }
cc2: "LS" is fmt2_cc=0b0101 { tmp:1 = !L; export tmp; }
cc2: "GT" is fmt2_cc=0b0110 { tmp:1  = N; export tmp; }
cc2: "LE" is fmt2_cc=0b0111 { tmp:1 = !N; export tmp; }
cc2: "FS" is fmt2_cc=0b1000 { tmp:1 =  F; export tmp; }
cc2: "FC" is fmt2_cc=0b1001 { tmp:1 = !F; export tmp; }
cc2: "LO" is fmt2_cc=0b1010 { tmp:1 = !L && !Z; export tmp; }
cc2: "HS" is fmt2_cc=0b1011 { tmp:1 =  L ||  Z; export tmp; }
cc2: "LT" is fmt2_cc=0b1100 { tmp:1 = !N && !Z; export tmp; }
cc2: "GE" is fmt2_cc=0b1101 { tmp:1 =  N ||  Z; export tmp; }
cc2: "T"  is fmt2_cc=0b1110 { export 1:1; }
cc2: "F"  is fmt2_cc=0b1111 { export 0:1; }

i: "B" is i16_i=0b00 [ isize = 0b00; ] {}
i: "W" is i16_i=0b01 [ isize = 0b01; ] {}
i: "D" is i16_i=0b11 [ isize = 0b11; ] {}

imm: "#"^imm8  is isize=0b00 &  imm8 { export *[const]:4 imm8; }
imm: "#"^imm16 is isize=0b01 & imm16 { export *[const]:4 imm16; }
imm: "#"^imm32 is isize=0b11 & imm32 { export *[const]:4 imm32; }

bdest: reloc is  d8_mask=0b0  &  val8 [ reloc=inst_start+val8; ] { export *[ram]:4 reloc; }
bdest: reloc is d16_mask=0b10 & val16 [ reloc=inst_start+val16; ] { export *[ram]:4 reloc; }
bdest: reloc is d32_mask=0b11 & val32 [ reloc=inst_start+val32; ] { export *[ram]:4 reloc; }

areg: "US" is fmt2_short=0b0000 {}
areg: "FP" is fmt2_short=0b1000 {}
areg: "SP" is fmt2_short=0b1001 {}
areg: "SB" is fmt2_short=0b1010 {}
areg: "PSR" is fmt2_short=0b1101 {}
areg: "INTBASE" is fmt2_short=0b1110 {}
areg: "MOD" is fmt2_short=0b1111 {}

sopts: "T" is fmt5_opts=0b0001 {}
sopts: "B" is fmt5_opts=0b0010 {}
sopts: "BT" is fmt5_opts=0b0011 {}
sopts: "WT" is fmt5_opts=0b0101 {}
sopts: "WB" is fmt5_opts=0b0110 {}
sopts: "WBT" is fmt5_opts=0b0111 {}
sopts: "UT" is fmt5_opts=0b1101 {}
sopts: "UB" is fmt5_opts=0b1110 {}
sopts: "UBT" is fmt5_opts=0b1111 {}

cfg: "CFG" is fmt5_cfg {}

#
# General addressing modes
#
gen1: i16_gen1_r is i16_gen1_op=0b00 & i16_gen1_r { export i16_gen1_r; }
gen1: disp(i16_gen1_r) is i16_gen1_op=0b01 & i16_gen1_r ; disp { tmp:4 = i16_gen1_r + disp; export tmp; }
gen1: imm is i16_gen1=0b10100 ; imm { export imm; }
gen1: @disp is i16_gen1=0b10101 ; disp { export disp; }
gen1: "TOS" is i16_gen1=0b10111 { export SP1; }
gen1: disp(i16_gen1_a) is i16_gen1_op=0b11 & i16_gen1_a ; disp { tmp:4 = i16_gen1_a + disp; export tmp; }
gen1: *+disp is i16_gen1=0b11011 ; disp { tmp:4 = PC + disp; export tmp; }
gen1: idx_gen[idx_reg^":B"] is i16_gen1=0b11100 ; idx_reg & idx_gen { export 0:4; }
gen1: idx_gen[idx_reg^":W"] is i16_gen1=0b11101 ; idx_reg & idx_gen { export 0:4; }
gen1: idx_gen[idx_reg^":Q"] is i16_gen1=0b11110 ; idx_reg & idx_gen { export 0:4; }
gen1: idx_gen[idx_reg^":D"] is i16_gen1=0b11111 ; idx_reg & idx_gen { export 0:4; }

gen2: i16_gen2_r is (i16_gen2_op=0b00 & i16_gen2_r) ... { export i16_gen2_r; }
gen2: disp(i16_gen2_r) is i16_gen2_op=0b01 & i16_gen2_r ; disp { tmp:4 = i16_gen2_r + disp; export tmp; }
gen2: imm is (i16_gen2=0b10100) ; imm { export imm; }
gen2: @disp is (i16_gen2=0b10101) ... & disp { export disp; }
gen2: "TOS" is i16_gen2=0b10111 { export SP1; }
gen2: disp(i16_gen2_a) is i16_gen2_op=0b11 & i16_gen2_a ; disp { tmp:4 = i16_gen2_a + disp; export tmp; }
gen2: *+disp is i16_gen2=0b11011 ; disp { tmp:4 = PC + disp; export tmp; }
gen2: idx_gen[idx_reg^":B"] is i16_gen2=0b11100 ; idx_reg & idx_gen { export 0:4; }
gen2: idx_gen[idx_reg^":W"] is i16_gen2=0b11101 ; idx_reg & idx_gen { export 0:4; }
gen2: idx_gen[idx_reg^":Q"] is i16_gen2=0b11110 ; idx_reg & idx_gen { export 0:4; }
gen2: idx_gen[idx_reg^":D"] is i16_gen2=0b11111 ; idx_reg & idx_gen { export 0:4; }

# Format 0 - Conditional branch
:B^cc bdest is b0_3=0b1010 & cc ; bdest { if (cc) goto bdest; }

#Â Format 1 
:BSR  bdest is b0_3=0b0010 & op=0b0000 ; bdest { call bdest; }
:RET  disp is b0_3=0b0010 & op=0b0001 ; disp {}
:CXP  disp is b0_3=0b0010 & op=0b0010 ; disp {}
:RXP  disp is b0_3=0b0010 & op=0b0011 ; disp {}
:RETT disp is b0_3=0b0010 & op=0b0100 ; disp {}
:RETI      is b0_3=0b0010 & op=0b0101 {}
:SAVE    imm8 is b0_3=0b0010 & op=0b0110 ; imm8 {}
:RESTORE imm8 is b0_3=0b0010 & op=0b0111 ; imm8 {}
:ENTER imm8,disp is b0_3=0b0010 & op=0b1000 ; imm8; disp {}
:EXIT  imm8 is b0_3=0b0010 & op=0b1001 ; imm8 {}
:NOP  is b0_3=0b0010 & op=0b1010 {}
:WAIT is b0_3=0b0010 & op=0b1011 {}
:DIA  is b0_3=0b0010 & op=0b1100 {}
:FLAG is b0_3=0b0010 & op=0b1101 {}
:SVC  is b0_3=0b0010 & op=0b1110 {}
:BPT  is b0_3=0b0010 & op=0b1111 {}

# Format 2
:ADDQ^i fmt2_short,gen1 is (i & fmt2_2_3=0b11 & fmt2_op=0b000 & fmt2_short)... & gen1 {}
:CMPQ^i fmt2_short,gen1 is (i & fmt2_2_3=0b11 & fmt2_op=0b001 & fmt2_short)... & gen1 {}
:SPR^i areg,gen1 is (i & fmt2_2_3=0b11 & fmt2_op=0b010 & areg)... & gen1 {}
:S^cc2^i is (i & fmt2_2_3=0b11 & fmt2_op=0b011 & cc2)... & gen1 {}
:ACB^i fmt2_short,gen1,bdest  is (i & fmt2_2_3=0b11 & fmt2_op=0b100 & fmt2_short)... & gen1 ; bdest { if (Z) goto bdest; }
:MOVQ^i fmt2_short, gen1 is (i & fmt2_2_3=0b11 & fmt2_op=0b101 & fmt2_short)... & gen1 {}
:LPR^i areg,gen1 is (i & fmt2_2_3=0b11 & fmt2_op=0b110 & areg)... & gen1 {}

# Format 3
:CXPD     gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b0000)... & gen1 {}
:BICPSR^i gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b0010)... & gen1 {}
:JUMP     gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b0100)... & gen1 { goto gen1; }
:BISPSR^i gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b0110)... & gen1 {}
:ADJSP^i  gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b1010)... & gen1 {}
:JSR      gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b1100)... & gen1 { call gen1; }
:CASE^i   gen1 is (i & fmt3_2_6=0b11111 & fmt3_op=0b1110)... & gen1 {}

# Format 4
:ADD^i  gen1,gen2 is (i & fmt4_op=0b0000)... & gen1 & gen2 {}
:CMP^i  gen1,gen2 is (i & fmt4_op=0b0001)... & gen1 & gen2 {}
:BIC^i  gen1,gen2 is (i & i16_i != 0b10 & fmt4_op=0b0010)... & gen1 & gen2 {}
:ADDC^i gen1,gen2 is (i & fmt4_op=0b0100)... & gen1 & gen2 {}
:MOV^i  gen1,gen2 is (i & fmt4_op=0b0101)... & gen1 ... & gen2 {}
:OR^i   gen1,gen2 is (i & i16_i != 0b10 & fmt4_op=0b0110)... & gen1 & gen2 {}
:SUB^i  gen1,gen2 is (i & fmt4_op=0b1000)... & gen1 & gen2 {}
:ADDR   gen1,gen2 is (i & fmt4_op=0b1001)... & gen1 & gen2 {}
:AND^i  gen1,gen2 is (i & i16_i != 0b10 & fmt4_op=0b1010)... & gen1 & gen2 {}
:SUBC^i gen1,gen2 is (i & fmt4_op=0b1100)... & gen1 & gen2 {}
:TBIT   gen1,gen2 is (i & fmt4_op=0b1101)... & gen1 & gen2 {}
:XOR    gen1,gen2 is (i & i16_i != 0b10 & fmt4_op=0b1110)... & gen1 & gen2 {}

# Format 5
:MOVS^i sopts is i8_all=0b00001110 ; (i & fmt4_op=0b0000 & fmt5_6=0 & sopts & i16_gen1=0b00000) {}
:CMPS^i sopts is i8_all=0b00001110 ; (i & fmt4_op=0b0001 & fmt5_6=0 & sopts & i16_gen1=0b00000) {}
:SETCFG cfg   is i8_all=0b00001110 ; (i & fmt4_op=0b0010 & fmt5_6=0 & cfg & i16_gen1=0b00000) {}
:SKPS   sopts is i8_all=0b00001110 ; (i & fmt4_op=0b0011 & fmt5_6=0 & sopts & i16_gen1=0b00000) {}

# Format 6
:ROT   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0000)... & gen1 & gen2 {}
:ASH   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0001)... & gen1 & gen2 {}
:CBIT  gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0010)... & gen1 & gen2 {}
:CBITI gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0011)... & gen1 & gen2 {}
:LSH   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0101)... & gen1 & gen2 {}
:SBIT  gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0110)... & gen1 & gen2 {}
:SBITI gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b0111)... & gen1 & gen2 {}
:NEG   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1000)... & gen1 & gen2 {}
:NOT   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1001)... & gen1 & gen2 {}
:SUBP  gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1011)... & gen1 & gen2 {}
:ABS   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1100)... & gen1 & gen2 {}
:COM   gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1101)... & gen1 & gen2 {}
:IBIT  gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1110)... & gen1 & gen2 {}
:ADDP  gen1,gen2 is i8_all=0b010001110 ; (i & fmt4_op=0b1111)... & gen1 & gen2 {}

# Format 7
:MOVZ^i^"D" gen1,gen2 is i8_all=0b11001110 ; (i & fmt4_op=0b0110)... & gen1 & gen2 {}

# Catch all
:UNK.^i8_all is i8_all {}
